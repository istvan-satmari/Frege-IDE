package BaseFrege.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class AddNewGuard_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddNewGuard_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:5eba7a7f-3c32-439d-a42a-75f845216a7d(BaseFrege.intentions)", "1061876102422671919"));
  }
  @Override
  public String getPresentation() {
    return "AddNewGuard";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddNewGuard_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Insert New Guard.";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      // Find the currently selected guard 
      SNode surroundingFDGGuards = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x2c5b28a4a146e49fL, "BaseFrege.structure.FDGGuards"), false, false);
      List<SNode> guards = SLinkOperations.getChildren(surroundingFDGGuards, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x2c5b28a4a146e49fL, 0x2c5b28a4a146e4a0L, "guards"));
      int nodeIndex = SNodeOperations.getIndexInParent(ListSequence.fromList(guards).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return it == node;
        }
      }));

      // Insert at the appropriate position right below the current guard 
      ListSequence.fromList(guards).insertElement(nodeIndex + 1, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d926L, "BaseFrege.structure.Guard")), null));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddNewGuard_Intention.this;
    }
  }
}
