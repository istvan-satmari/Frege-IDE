package BaseFrege.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import BaseFrege.behavior.FDGrouped__BehaviorDescriptor;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class AddNewMatcher_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddNewMatcher_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:5eba7a7f-3c32-439d-a42a-75f845216a7d(BaseFrege.intentions)", "2127905572593965650"));
  }
  @Override
  public String getPresentation() {
    return "AddNewMatcher";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false) != null);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddNewMatcher_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Insert New Matcher.";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode surroundingFDGrouped = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false);
      List<SNode> matchers = SLinkOperations.getChildren(surroundingFDGrouped, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, 0x155bf5aa28426dedL, "matchers"));
      final SNode currentMatcher = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d89fL, "BaseFrege.structure.Definition"), false, false);
      int nodeIndex = SNodeOperations.getIndexInParent(ListSequence.fromList(matchers).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return it == currentMatcher;
        }
      }));
      ListSequence.fromList(matchers).insertElement(nodeIndex + 1, FDGrouped__BehaviorDescriptor.getNewMatcher_id181lOLSjaQh.invoke(surroundingFDGrouped));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddNewMatcher_Intention.this;
    }
  }
}
