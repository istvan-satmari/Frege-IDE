package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public abstract class ListScope extends Scope {
  private List<SNode> nodeList;
  public abstract String getName(SNode child);

  public ListScope(List<SNode> nodeList) {
    this.nodeList = nodeList;
  }

  @Override
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    SNode result = null;
    for (SNode n : nodeList) {
      if (refText.equals(getName(n))) {
        if (result != null) {
          return null;
        }
        result = n;
      }
    }

    return result;
  }

  @Override
  public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode n : nodeList) {
      String name = getName(n);
      if (prefix == null || name.startsWith(prefix)) {
        ListSequence.fromList(result).addElement(n);
      }
    }

    return result;
  }

  @Override
  public String getReferenceText(SNode contextNode, SNode node) {
    if (node == null || !(ListSequence.fromList(nodeList).contains(node))) {
      return null;
    }

    String result = getName(node);
    for (SNode n : nodeList) {
      if (n == node) {
        continue;
      }
      String name = getName(n);
      if (name.equals(result)) {
        // Ambiguity 
        return null;
      }
    }

    return result;
  }
}
