package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Skeleton__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(Skeleton__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, "BaseFrege.structure.Skeleton");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> lateLoad_id5PvAQDJbxqz = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("lateLoad").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5PvAQDJbxqz").registry(REGISTRY).build();
  public static final SMethod<List<SNode>> getDefinitions_id69o01iEpzfG = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getDefinitions").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("69o01iEpzfG").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""));
  public static final SMethod<SNode> getAncestorAtLevel_id2rZSvAJJ1gU = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getAncestorAtLevel").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2rZSvAJJ1gU").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Boolean> testAncestorInstances_id2y7PD0QOpUf = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("testAncestorInstances").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2y7PD0QOpUf").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<SAbstractConcept>>) ((Class) Object.class), ""));
  public static final SMethod<Scope> getOwnPublicScope_id5c96$3RFA4u = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getOwnPublicScope").modifiers(SModifiersImpl.create(8, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("5c96$3RFA4u").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("52_Geb4QDV$").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(lateLoad_id5PvAQDJbxqz, getDefinitions_id69o01iEpzfG, getAncestorAtLevel_id2rZSvAJJ1gU, testAncestorInstances_id2y7PD0QOpUf, getOwnPublicScope_id5c96$3RFA4u, getScope_id52_Geb4QDV$);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Name");
  }

  /*package*/ static void lateLoad_id5PvAQDJbxqz(@NotNull SNode __thisNode__) {
    // Import standard libraries if possible 
    Libraries libraries = new Libraries(__thisNode__);
    libraries.loadExactly("mps.frege.Default");
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d89cL, "imports"))).addSequence(ListSequence.fromList(libraries.getAsImportNodes()));
  }
  /*package*/ static List<SNode> getDefinitions_id69o01iEpzfG(@NotNull SNode __thisNode__, SAbstractConcept kind) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    {
      Iterator<SNode> definition_it = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d8a2L, "definitions"))).iterator();
      SNode definition_var;
      while (definition_it.hasNext()) {
        definition_var = definition_it.next();
        if (SNodeOperations.asSConcept(SNodeOperations.getConcept(definition_var)).isSubConceptOf(kind)) {
          ListSequence.fromList(result).addElement(definition_var);
        }
      }
    }

    return result;
  }
  /*package*/ static SNode getAncestorAtLevel_id2rZSvAJJ1gU(@NotNull SAbstractConcept __thisConcept__, SNode node, int parentLevel) {
    // Returns the node that is the "parentLevel"-th parent of the given "node" 
    // 0 = the current "node" 
    // If the "parentLevel" exceeds the tree's depth, null is returned 
    if (parentLevel == 0) {
      return node;
    } else if (parentLevel > 0 && (node != null)) {
      return Skeleton__BehaviorDescriptor.getAncestorAtLevel_id2rZSvAJJ1gU.invoke(__thisConcept__, SNodeOperations.getParent(node), ((int) (parentLevel - 1)));
    } else {
      return null;
    }
  }
  /*package*/ static boolean testAncestorInstances_id2y7PD0QOpUf(@NotNull SAbstractConcept __thisConcept__, SNode node, List<SAbstractConcept> instances) {
    // Returns whether the given or any of its ancestor is of an instance instances[0], 
    // its any ancestor of an instance instances[1], its ancestor instances[2], ... 
    // ...up to the last instances item 
    SNode currentNode = node;
    for (SAbstractConcept concept : ListSequence.fromList(instances)) {
      currentNode = TreeUtilities.findUpward(concept, currentNode);
      if ((currentNode == null)) {
        return false;
      }
    }

    return true;
  }
  /*package*/ static Scope getOwnPublicScope_id5c96$3RFA4u(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child, SNode calledBy, String restriction) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, "BaseFrege.structure.Module"))) {
      // Module 
      return new SimpleRoleScope(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")) {
        public String getName(SNode child) {
          return ModuleName__BehaviorDescriptor.getFullName_id3PPtPKK8q45.invoke(SLinkOperations.getTarget(SNodeOperations.cast(child, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, "BaseFrege.structure.Module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name")));
        }
      };
    } else if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L, "BaseFrege.structure.Import"))) {
      // Import 
      final List<SNode> importsList = ListSequence.fromList(new ArrayList<SNode>());
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d89cL, "imports"))).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          // Only the non-hidden imports are to be provided 
          if (!(SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L, 0x5d5f9b6a6eedb167L, "_hidden")))) {
            ListSequence.fromList(importsList).addElement(it);
          }
        }
      });
      return new ListScopeImports(importsList);
    }

    // Default 
    return new EmptyScope();
  }
  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child) {
    // Request for scope comes from a child 
    if (ScopeUtils.comeFrom(MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d89cL, "imports"), __thisNode__, child)) {
      // For imports we have to provide scope of the sibling Skeleton modules (siblings only) 
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, "BaseFrege.structure.Module"))) {
        return new ScopeSiblingModules(__thisNode__);
      } else {
        LoggingRuntime.logMsgView(Level.ERROR, "Illegal scope request from an import", Skeleton__BehaviorDescriptor.class, null, null);
        return new EmptyScope();
      }
    } else if (ScopeUtils.comeFrom(MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module"), __thisNode__, child)) {
      // For module we have to provide this module's scope only and nothing else (i.e. stuff from import must be empty) 
      return DCScopeProvider__BehaviorDescriptor.getPublicScope_id5c96$3RFu09.invoke(__thisNode__, kind, child, __thisNode__, "module");
    } else {
      // For others, we provide childrens' scopes 
      return DCScopeProvider__BehaviorDescriptor.getPublicScope_id5c96$3RFu09.invoke(__thisNode__, kind, child, __thisNode__, "public");
    }
  }

  /*package*/ Skeleton__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        lateLoad_id5PvAQDJbxqz(node);
        return null;
      case 1:
        return (T) ((List<SNode>) getDefinitions_id69o01iEpzfG(node, (SAbstractConcept) parameters[0]));
      case 4:
        return (T) ((Scope) getOwnPublicScope_id5c96$3RFA4u(node, (SAbstractConcept) parameters[0], (SNode) parameters[1], (SNode) parameters[2], (String) parameters[3]));
      case 5:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 2:
        return (T) ((SNode) getAncestorAtLevel_id2rZSvAJJ1gU(concept, (SNode) parameters[0], ((int) (Integer) parameters[1])));
      case 3:
        return (T) ((Boolean) testAncestorInstances_id2y7PD0QOpUf(concept, (SNode) parameters[0], (List<SAbstractConcept>) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
