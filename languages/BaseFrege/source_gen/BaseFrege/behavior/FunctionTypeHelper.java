package BaseFrege.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public abstract class FunctionTypeHelper {

  public static SNode getReturnType(SNode functionType, int argumentsUsedCount) {
    // Were all of the arguments used? 
    int realExpectedArgumentsCount = ListSequence.fromList(SLinkOperations.getChildren(functionType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).count() - 1;
    if (realExpectedArgumentsCount == argumentsUsedCount) {
      // Yes 
      return ListSequence.fromList(SLinkOperations.getChildren(functionType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).last();

    } else {
      // No => currying 
      SNode ftn = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"));
      for (int i = argumentsUsedCount; i < ListSequence.fromList(SLinkOperations.getChildren(functionType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).count(); i++) {
        ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).addElement(SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(functionType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).getElement(i)));
      }
      return ftn;
    }
  }

  public static SNode mergeWithDefinitionType(SNode functionType, SNode definitionType) {
    // Make a copy 
    SNode ftn = SNodeOperations.copyNode(functionType);

    // Merge 
    if (SNodeOperations.isInstanceOf(definitionType, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"))) {
      // In case the definitionType is also a function, merge them into a single function 
      SNode functionDefinitionType = SNodeOperations.cast(definitionType, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"));
      for (SNode definitionArgument : ListSequence.fromList(SLinkOperations.getChildren(functionDefinitionType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments")))) {
        ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).addElement(definitionArgument);
      }

    } else {
      // Otherwise add it as the last argument 
      ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).addElement(definitionType);
    }

    return ftn;
  }

}
