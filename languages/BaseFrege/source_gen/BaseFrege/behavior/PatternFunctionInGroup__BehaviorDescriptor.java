package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import jetbrains.mps.scope.Scope;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class PatternFunctionInGroup__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL, "BaseFrege.structure.PatternFunctionInGroup");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<SNode> GetNameNode_id3EDs8MVEJ19 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("GetNameNode").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3EDs8MVEJ19").registry(REGISTRY).build();
  public static final SMethod<String> GetName_id1lrXqCChpeO = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1lrXqCChpeO").registry(REGISTRY).build();
  public static final SMethod<Void> SetName_id1lrXqCChqfd = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("SetName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1lrXqCChqfd").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Boolean> IsValidName_id4QVy75p6Llu = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("IsValidName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4QVy75p6Llu").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<String>> GetVariableNames_id50lglqqP9oo = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("GetVariableNames").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("50lglqqP9oo").registry(REGISTRY).build();
  public static final SMethod<Scope> getPublicScopeFromChildren_id5c96$3RL4yv = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getPublicScopeFromChildren").modifiers(SModifiersImpl.create(8, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("5c96$3RL4yv").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Scope> getOwnPublicScope_id5c96$3RFA4u = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getOwnPublicScope").modifiers(SModifiersImpl.create(8, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("5c96$3RFA4u").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(GetNameNode_id3EDs8MVEJ19, GetName_id1lrXqCChpeO, SetName_id1lrXqCChqfd, IsValidName_id4QVy75p6Llu, GetVariableNames_id50lglqqP9oo, getPublicScopeFromChildren_id5c96$3RL4yv, getOwnPublicScope_id5c96$3RFA4u);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode GetNameNode_id3EDs8MVEJ19(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(__thisNode__, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, 0x155bf5aa28426e00L, "scommonEntity")), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a4a35L, "BaseFrege.structure.FDGCEName")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a4a35L, 0x4dbb8871591a4a36L, "name"));
  }
  /*package*/ static String GetName_id1lrXqCChpeO(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(PatternFunctionInGroup__BehaviorDescriptor.GetNameNode_id3EDs8MVEJ19.invoke(__thisNode__), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L, 0x3f5c5828a389520aL, "name")), MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L, 0x7a213c18049985f2L, "value"));
  }
  /*package*/ static void SetName_id1lrXqCChqfd(@NotNull SNode __thisNode__, String name) {
    SPropertyOperations.set(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(__thisNode__, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, 0x155bf5aa28426e00L, "scommonEntity")), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a4a35L, "BaseFrege.structure.FDGCEName")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a4a35L, 0x4dbb8871591a4a36L, "name")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L, 0x3f5c5828a389520aL, "name")), MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L, 0x7a213c18049985f2L, "value"), name);
  }
  /*package*/ static boolean IsValidName_id4QVy75p6Llu(@NotNull SNode __thisNode__, String name) {
    return name.matches(NodeVARID__BehaviorDescriptor.getPattern_id30ixEdP_hUv.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L, "BaseFrege.structure.NodeVARID"))));
  }
  /*package*/ static List<String> GetVariableNames_id50lglqqP9oo(@NotNull SNode __thisNode__) {
    List<String> childVariableNames = ListSequence.fromList(new ArrayList<String>());

    // Name of the function (is also a variable name) 
    ListSequence.fromList(childVariableNames).addElement(PatternFunctionInGroup__BehaviorDescriptor.GetName_id1lrXqCChpeO.invoke(__thisNode__));

    // Child variable names 
    for (SNode argument : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL, 0x155bf5aa28416273L, "arguments")))) {
      ListSequence.fromList(childVariableNames).addSequence(ListSequence.fromList(Pattern__BehaviorDescriptor.GetVariableNames_id50lglqqP9oo.invoke(argument)));
    }

    return childVariableNames;
  }
  /*package*/ static Scope getPublicScopeFromChildren_id5c96$3RL4yv(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child, SNode calledBy, String restriction) {
    // Do NOT delegate scope creation to children 
    return new EmptyScope();
  }
  /*package*/ static Scope getOwnPublicScope_id5c96$3RFA4u(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child, SNode calledBy, String restriction) {
    if (restriction == "variables") {
      // Provide scope of the child variables 
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L, "BaseFrege.structure.PVarName"))) {
        CompositeScope vars = new CompositeScope();
        vars.addScope(new FilteredRoleScopePVarName(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL, 0x155bf5aa28416273L, "arguments")));

        // Delegate scope creation to children (for nested variables, e.g. variable in a list [x, y, z]) 
        for (SNode singleArgument : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL, 0x155bf5aa28416273L, "arguments")))) {
          vars.addScope(DCScopeProvider__BehaviorDescriptor.getPublicScope_id5c96$3RFu09.invoke(singleArgument, kind, child, __thisNode__, restriction));
        }

        return vars;
      }
    }

    // Default 
    return new EmptyScope();
  }

  /*package*/ PatternFunctionInGroup__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) GetNameNode_id3EDs8MVEJ19(node));
      case 1:
        return (T) ((String) GetName_id1lrXqCChpeO(node));
      case 2:
        SetName_id1lrXqCChqfd(node, (String) parameters[0]);
        return null;
      case 3:
        return (T) ((Boolean) IsValidName_id4QVy75p6Llu(node, (String) parameters[0]));
      case 4:
        return (T) ((List<String>) GetVariableNames_id50lglqqP9oo(node));
      case 5:
        return (T) ((Scope) getPublicScopeFromChildren_id5c96$3RL4yv(node, (SAbstractConcept) parameters[0], (SNode) parameters[1], (SNode) parameters[2], (String) parameters[3]));
      case 6:
        return (T) ((Scope) getOwnPublicScope_id5c96$3RFA4u(node, (SAbstractConcept) parameters[0], (SNode) parameters[1], (SNode) parameters[2], (String) parameters[3]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
