package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class FDComplete__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d7900fe84e0386eL, "BaseFrege.structure.FDComplete");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> canGetFDGrouped_id4QVy75p5ji2 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canGetFDGrouped").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4QVy75p5ji2").registry(REGISTRY).build();
  public static final SMethod<SNode> getFDGrouped_id4QVy75p411F = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getFDGrouped").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4QVy75p411F").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<SNode> getNodeToSelect_id4QVy75p8CBP = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getNodeToSelect").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4QVy75p8CBP").registry(REGISTRY).build();
  public static final SMethod<SNode> getPatternWrapper_id181lOLSjrci = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getPatternWrapper").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("181lOLSjrci").registry(REGISTRY).build();
  public static final SMethod<Boolean> shouldWrapWithFDGrouped_id5d6A1kNQwr6 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("shouldWrapWithFDGrouped").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5d6A1kNQwr6").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> getTypedDefinitionNode_id2LraaixmJl3 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getTypedDefinitionNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2LraaixmJl3").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(canGetFDGrouped_id4QVy75p5ji2, getFDGrouped_id4QVy75p411F, getNodeToSelect_id4QVy75p8CBP, getPatternWrapper_id181lOLSjrci, shouldWrapWithFDGrouped_id5d6A1kNQwr6, getTypedDefinitionNode_id2LraaixmJl3);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean canGetFDGrouped_id4QVy75p5ji2(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static SNode getFDGrouped_id4QVy75p411F(@NotNull SNode __thisNode__, boolean wrapWithFDGrouped) {
    return null;
  }
  /*package*/ static SNode getNodeToSelect_id4QVy75p8CBP(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static SNode getPatternWrapper_id181lOLSjrci(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static boolean shouldWrapWithFDGrouped_id5d6A1kNQwr6(@NotNull SAbstractConcept __thisConcept__, SNode fundef) {
    SNode fdg = SNodeOperations.getNodeAncestor(fundef, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false);
    SNode letdefs = SNodeOperations.getNodeAncestor(fundef, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x66fa4fc65829ede0L, "BaseFrege.structure.LetDefinitions"), false, false);

    if ((fdg != null) && (letdefs != null)) {
      // Case 1: Both are non-null, so we may be surrounded by "where" clause, 
      // where we may need to create a new FDGrouped 
      return (SNodeOperations.getNodeAncestor(letdefs, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped"), false, false) == fdg);
    } else {
      // Case 2: We are definitely not inside "where" 
      return (fdg == null);
    }
  }
  /*package*/ static SNode getTypedDefinitionNode_id2LraaixmJl3(@NotNull SNode __thisNode__) {
    // Returns a node that has inferred type, the content is not important 
    // e.g. for FDGuards, it is a "guards : FDGGuards" node, for FDAssignment, it is "equalsTo : Expression", etc. 
    return null;
  }

  /*package*/ FDComplete__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) canGetFDGrouped_id4QVy75p5ji2(node));
      case 1:
        return (T) ((SNode) getFDGrouped_id4QVy75p411F(node, ((boolean) (Boolean) parameters[0])));
      case 2:
        return (T) ((SNode) getNodeToSelect_id4QVy75p8CBP(node));
      case 3:
        return (T) ((SNode) getPatternWrapper_id181lOLSjrci(node));
      case 5:
        return (T) ((SNode) getTypedDefinitionNode_id2LraaixmJl3(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 4:
        return (T) ((Boolean) shouldWrapWithFDGrouped_id5d6A1kNQwr6(concept, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
