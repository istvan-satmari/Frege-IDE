package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Set;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class NodeOperator__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L, "BaseFrege.structure.NodeOperator");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> getPattern_id1QLLtx6mXyJ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPattern").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1QLLtx6mXyJ").registry(REGISTRY).build();
  public static final SMethod<String> getFirstCharacterPattern_id1QLLtx6mXzS = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getFirstCharacterPattern").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1QLLtx6mXzS").registry(REGISTRY).build();
  public static final SMethod<List<Character>> getAvailableSymbols_id2rZSvAJQoOq = new SMethodBuilder<List<Character>>(new SJavaCompoundTypeImpl((Class<List<Character>>) ((Class) Object.class))).name("getAvailableSymbols").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2rZSvAJQoOq").registry(REGISTRY).build();
  public static final SMethod<Set<String>> getCharactersHashSet_id2rZSvAJiHvX = new SMethodBuilder<Set<String>>(new SJavaCompoundTypeImpl((Class<Set<String>>) ((Class) Object.class))).name("getCharactersHashSet").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2rZSvAJiHvX").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getPattern_id1QLLtx6mXyJ, getFirstCharacterPattern_id1QLLtx6mXzS, getAvailableSymbols_id2rZSvAJQoOq, getCharactersHashSet_id2rZSvAJiHvX);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getPattern_id1QLLtx6mXyJ(@NotNull SAbstractConcept __thisConcept__) {
    return "^[-#$%&*+./<=>?@\\^|~:]+$";
  }
  /*package*/ static String getFirstCharacterPattern_id1QLLtx6mXzS(@NotNull SAbstractConcept __thisConcept__) {
    return "[-#$%&*+./<=>?@\\^|~:]";
  }
  /*package*/ static List<Character> getAvailableSymbols_id2rZSvAJQoOq(@NotNull SAbstractConcept __thisConcept__) {
    return ListSequence.fromListAndArray(new ArrayList<Character>(), ':', '~', '|', '^', '\\', '@', '?', '>', '=', '<', '/', '.', '+', '*', '&', '%', '$', '#', '-');
  }
  /*package*/ static Set<String> getCharactersHashSet_id2rZSvAJiHvX(@NotNull SAbstractConcept __thisConcept__) {
    Set<String> result = SetSequence.fromSet(new HashSet<String>());
    List<Character> availableSymbols = NodeOperator__BehaviorDescriptor.getAvailableSymbols_id2rZSvAJQoOq.invoke(__thisConcept__);
    for (char symbol : availableSymbols) {
      SetSequence.fromSet(result).addElement(String.valueOf(symbol));
    }

    return result;
  }

  /*package*/ NodeOperator__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getPattern_id1QLLtx6mXyJ(concept));
      case 1:
        return (T) ((String) getFirstCharacterPattern_id1QLLtx6mXzS(concept));
      case 2:
        return (T) ((List<Character>) getAvailableSymbols_id2rZSvAJQoOq(concept));
      case 3:
        return (T) ((Set<String>) getCharactersHashSet_id2rZSvAJiHvX(concept));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
