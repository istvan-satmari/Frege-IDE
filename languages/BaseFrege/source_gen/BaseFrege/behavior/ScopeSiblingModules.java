package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

public class ScopeSiblingModules extends Scope {
  private ListScopeModules listScopeModules;

  public ScopeSiblingModules(final SNode skeletonNode) {
    // Get the referentiable sibling modules 
    final List<SNode> modules = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(skeletonNode), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, "BaseFrege.structure.Skeleton"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (it != skeletonNode) {
          ListSequence.fromList(modules).addElement(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")));
        }
      }
    });

    // Construct the scope 
    this.listScopeModules = new ListScopeModules(modules);
  }

  @Override
  public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
    return this.listScopeModules.getAvailableElements(prefix);
  }

  @Nullable
  @Override
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    return this.listScopeModules.resolve(contextNode, refText);
  }

  @Nullable
  @Override
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return this.listScopeModules.getReferenceText(contextNode, node);
  }
}
