package BaseFrege.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class BracketsApplication__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, "BaseFrege.structure.BracketsApplication");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> canBecomeTuple_id7sZOd2UMcC6 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canBecomeTuple").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7sZOd2UMcC6").registry(REGISTRY).build();
  public static final SMethod<SNode> changeToTuple_id7sZOd2UMs_N = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("changeToTuple").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7sZOd2UMs_N").registry(REGISTRY).build();
  public static final SMethod<Boolean> isExpressionLonely_id6WhInY3JvZq = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isExpressionLonely").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6WhInY3JvZq").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> putToBrackets_id2PVWAU2FlPK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("putToBrackets").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2PVWAU2FlPK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(canBecomeTuple_id7sZOd2UMcC6, changeToTuple_id7sZOd2UMs_N, isExpressionLonely_id6WhInY3JvZq, putToBrackets_id2PVWAU2FlPK);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean canBecomeTuple_id7sZOd2UMcC6(@NotNull SNode __thisNode__) {
    // Cannot become a tuple only if already actually used as a BracketApplication, i.e. has arguments 
    if ((SNodeOperations.getParent(__thisNode__) != null)) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, "BaseFrege.structure.GenericApplication"))) {
        SNode ga = SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, "BaseFrege.structure.GenericApplication"));
        if (SLinkOperations.getTarget(ga, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x3d75775c325bdda4L, "aentity")) == __thisNode__) {
          return ListSequence.fromList(SLinkOperations.getChildren(ga, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x1d87d6d81a2ba521L, "arguments"))).isEmpty();
        }
      }
    }

    return true;
  }
  /*package*/ static SNode changeToTuple_id7sZOd2UMs_N(@NotNull SNode __thisNode__) {
    SNode tuple = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d903L, "BaseFrege.structure.Tuple")), null);
    SLinkOperations.setTarget(tuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d903L, 0x7a213c18049a54f0L, "first"), SNodeOperations.copyNode(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, 0x4b2fbc03f0235db0L, "expression"))));

    SNode parent = SNodeOperations.getParent(__thisNode__);
    if ((parent != null) && SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, "BaseFrege.structure.GenericApplication"))) {
      SNodeOperations.replaceWithAnother(parent, tuple);
    } else {
      SNodeOperations.replaceWithAnother(__thisNode__, tuple);
    }

    return tuple;
  }
  /*package*/ static boolean isExpressionLonely_id6WhInY3JvZq(@NotNull SAbstractConcept __thisConcept__, SNode expression) {
    SNode brackets = SNodeOperations.getNodeAncestor(expression, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, "BaseFrege.structure.BracketsApplication"), false, false);
    if ((brackets != null)) {
      if ((SLinkOperations.getTarget(brackets, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, 0x4b2fbc03f0235db0L, "expression")) != null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(brackets, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, 0x4b2fbc03f0235db0L, "expression")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L, 0x5feee6d035b3708bL, "expression")) != null)) {
        SNode binex = SLinkOperations.getTarget(SLinkOperations.getTarget(brackets, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, 0x4b2fbc03f0235db0L, "expression")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L, 0x5feee6d035b3708bL, "expression"));
        if (ListSequence.fromList(SLinkOperations.getChildren(binex, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L, 0x4b2fbc03f022735cL, "additionalParts"))).isEmpty()) {
          return SLinkOperations.getTarget(binex, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L, 0x4b2fbc03f022735aL, "firstTopExpression")) == expression;
        }
      }
    }

    return false;
  }
  /*package*/ static SNode putToBrackets_id2PVWAU2FlPK(@NotNull SAbstractConcept __thisConcept__, SNode expression) {
    SNode brackets = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, "BaseFrege.structure.BracketsApplication")), null);
    SLinkOperations.setTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(brackets, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL, 0x4b2fbc03f0235db0L, "expression")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L, 0x5feee6d035b3708bL, "expression")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L, 0x4b2fbc03f022735aL, "firstTopExpression"), expression);
    return brackets;
  }

  /*package*/ BracketsApplication__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) canBecomeTuple_id7sZOd2UMcC6(node));
      case 1:
        return (T) ((SNode) changeToTuple_id7sZOd2UMs_N(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 2:
        return (T) ((Boolean) isExpressionLonely_id6WhInY3JvZq(concept, (SNode) parameters[0]));
      case 3:
        return (T) ((SNode) putToBrackets_id2PVWAU2FlPK(concept, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
