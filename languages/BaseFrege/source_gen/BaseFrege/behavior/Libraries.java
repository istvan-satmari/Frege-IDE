package BaseFrege.behavior;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;

public class Libraries {
  private static final Logger LOG = LogManager.getLogger(Libraries.class);
  private SNode skeletonNode;
  private List<SNode> loadedLibraries;

  public Libraries(SNode skeletonNode) {
    this.skeletonNode = skeletonNode;
    this.loadedLibraries = ListSequence.fromList(new ArrayList<SNode>());
  }

  private static SNode getImport(SNode skeletonNode) {
    SNode importNode = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L, "BaseFrege.structure.Import")), null);
    SLinkOperations.setTarget(importNode, MetaAdapterFactory.getReferenceLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L, 0x3d75775c30a5a46eL, "module"), SLinkOperations.getTarget(skeletonNode, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")));
    SPropertyOperations.set(importNode, MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L, 0x5d5f9b6a6eedb167L, "_hidden"), "" + (true));

    return importNode;
  }

  public void loadAll(final String moduleName) {
    if (moduleName == null || (moduleName == null || moduleName.length() == 0)) {
      return;
    }

    final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(this.skeletonNode), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, "BaseFrege.structure.Skeleton"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if ((SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")) != null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name")) != null)) {
          if (ModuleName__BehaviorDescriptor.getFullName_id3PPtPKK8q45.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name"))).startsWith(moduleName) || ModuleName__BehaviorDescriptor.getFinalName_id3PPtPKL4ozq.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name"))).startsWith(moduleName)) {
            ListSequence.fromList(result).addElement(getImport(it));
          }
        }
      }
    });

    ListSequence.fromList(this.loadedLibraries).addSequence(ListSequence.fromList(result));
  }

  public void loadExactly(final String moduleName) {
    final Wrappers._boolean found = new Wrappers._boolean(false);

    if (moduleName != null && (moduleName != null && moduleName.length() > 0)) {
      ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(this.skeletonNode), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, "BaseFrege.structure.Skeleton"))).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (found.value) {
            return;
          }

          if ((SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")) != null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name")) != null)) {
            if (ModuleName__BehaviorDescriptor.getFullName_id3PPtPKK8q45.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, 0x7fa876a53c3d865L, "module")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L, 0x3d75775c2fa0f910L, "name"))).equals(moduleName)) {
              ListSequence.fromList(Libraries.this.loadedLibraries).addElement(getImport(it));
              found.value = true;
            }
          }
        }
      });
    }

    if (!(found.value)) {
      LoggingRuntime.logMsgView(Level.ERROR, "Could not load the module " + moduleName, Libraries.class, null, null);
    }
  }

  public List<SNode> getAsImportNodes() {
    return this.loadedLibraries;
  }

}
