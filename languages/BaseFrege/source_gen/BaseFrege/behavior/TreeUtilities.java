package BaseFrege.behavior;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;

public abstract class TreeUtilities {
  private static final Logger LOG = LogManager.getLogger(TreeUtilities.class);

  public static SNode findUpward(SAbstractConcept kind, SNode fromNode) {
    // Returns the first node (going up in the tree) that is of an instance 'kind' starting with 'fromNode', or null 
    SNode currentNode = fromNode;
    while ((currentNode != null)) {
      if (SNodeOperations.getConcept(currentNode).isSubConceptOf(kind)) {
        return currentNode;
      }
      currentNode = SNodeOperations.getParent(currentNode);
    }

    return null;
  }

  public static SNode findUpwardClosest(List<SAbstractConcept> kinds, SNode fromNode) {
    // Returns the first node (going up in the tree) that is of any of the instances 'kinds' starting with 'fromNode' 
    // Returns null if nothing found 
    final Wrappers._T<SNode> currentNode = new Wrappers._T<SNode>(fromNode);
    while ((currentNode.value != null)) {
      if (ListSequence.fromList(kinds).any(new IWhereFilter<SAbstractConcept>() {
        public boolean accept(SAbstractConcept it) {
          return SNodeOperations.getConcept(currentNode.value).isSubConceptOf(it);
        }
      })) {
        return currentNode.value;
      }
      currentNode.value = SNodeOperations.getParent(currentNode.value);
    }

    return null;
  }

  public static boolean testKindsUpward(SNode node, List<SAbstractConcept> instances) {
    // Returns whether the given node is of an instance instances[0],  
    // its parent of an instance instances[1], its parent instances[2], ... 
    // ...up to the last instances item 
    SNode currentNode = node;
    for (SAbstractConcept concept : ListSequence.fromList(instances)) {
      if ((currentNode == null)) {
        return false;
      }
      if (!(SNodeOperations.getConcept(currentNode).isSubConceptOf(concept))) {
        return false;
      }
      currentNode = SNodeOperations.getParent(currentNode);
    }

    return true;
  }


  public static abstract class NodeVisitor {
    public abstract String visit(SNode node);
  }

  public static TreeUtilities.NodeVisitor defaultNodeVisitor = new TreeUtilities.NodeVisitor() {
    public String visit(SNode node) {
      return "Node: " + SNodeOperations.getConcept(node).getName() + " Alias: " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(node)) + " Presentation: " + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(node);
    }
  };

  public static void debugNode(SNode node, int leadingSpaces, TreeUtilities.NodeVisitor visitor) {
    StringBuilder lead = new StringBuilder();
    for (int i = 0; i < leadingSpaces; i++) {
      lead.append(" ");
    }

    if (visitor == null) {
      LoggingRuntime.logMsgView(Level.INFO, lead.toString() + defaultNodeVisitor.visit(node), TreeUtilities.class, null, null);
    } else {
      LoggingRuntime.logMsgView(Level.INFO, lead.toString() + visitor.visit(node), TreeUtilities.class, null, null);
    }

    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(node))) {
      debugNode(child, leadingSpaces + 5, visitor);
    }
  }

}
