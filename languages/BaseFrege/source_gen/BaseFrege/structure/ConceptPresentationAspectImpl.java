package BaseFrege.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AIOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AIVarid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Annotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnnotationItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BCContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BCLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BCNestedComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Brackets = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CPExprToExpr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CPExprToGuards = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Case = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CasePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CharValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Class = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Comment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstrCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Context = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Data = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDefinitionPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Definition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoubleValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpressionPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FCLambda = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FCNamed = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FCOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FDAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FDGuards = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Fixity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunDef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionDefinitions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Guard = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IICMConid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IICMOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IICMVarid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IICMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfThenElse = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Import = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportAs = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportHiding = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportItemClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportItemOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportItemQconid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportItemQvarid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImportList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Infix = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InfixAbstract = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Infixl = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Infixr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Instance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LCQArrowAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LCQGuard = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LCQLet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LCQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LDAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LDFunDef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LPExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LPLambda = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Lambda = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Let = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetDefinitions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LineComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_List = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListComprehension = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListEnumeration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListRange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Literal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSCONID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSVARID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSimple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Main = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Module = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeCONID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeVARID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PConstructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PListBrackets = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PListDot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PListVar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PTuple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PVarName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PVarWildcard = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Pattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QCONID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QVARID = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Resource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Rho = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Simpletype = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Simpletypes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Skeleton = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tau = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Term = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TopExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tuple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Type = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeBrackets = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeTuple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryOPExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Underscore = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WherePart = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AIOperator;
      case 1:
        return props_AIVarid;
      case 2:
        return props_Annotation;
      case 3:
        return props_AnnotationItem;
      case 4:
        return props_BCContent;
      case 5:
        return props_BCLine;
      case 6:
        return props_BCNestedComment;
      case 7:
        return props_BinaryExpression;
      case 8:
        return props_BlockComment;
      case 9:
        return props_BooleanValue;
      case 10:
        return props_Brackets;
      case 11:
        return props_CPExprToExpr;
      case 12:
        return props_CPExprToGuards;
      case 13:
        return props_Case;
      case 14:
        return props_CasePart;
      case 15:
        return props_CharValue;
      case 16:
        return props_Class;
      case 17:
        return props_Comment;
      case 18:
        return props_ConstrCall;
      case 19:
        return props_Context;
      case 20:
        return props_ContextPart;
      case 21:
        return props_Data;
      case 22:
        return props_DataDefinitionPart;
      case 23:
        return props_Definition;
      case 24:
        return props_DoubleValue;
      case 25:
        return props_EmptyLine;
      case 26:
        return props_Expression;
      case 27:
        return props_ExpressionPart;
      case 28:
        return props_FCLambda;
      case 29:
        return props_FCNamed;
      case 30:
        return props_FCOperator;
      case 31:
        return props_FDAssignment;
      case 32:
        return props_FDGuards;
      case 33:
        return props_Fixity;
      case 34:
        return props_FunCall;
      case 35:
        return props_FunDef;
      case 36:
        return props_FunctionDefinitions;
      case 37:
        return props_Guard;
      case 38:
        return props_IICMConid;
      case 39:
        return props_IICMOperator;
      case 40:
        return props_IICMVarid;
      case 41:
        return props_IICMember;
      case 42:
        return props_IfThenElse;
      case 43:
        return props_Import;
      case 44:
        return props_ImportAs;
      case 45:
        return props_ImportHiding;
      case 46:
        return props_ImportItem;
      case 47:
        return props_ImportItemClass;
      case 48:
        return props_ImportItemOperator;
      case 49:
        return props_ImportItemQconid;
      case 50:
        return props_ImportItemQvarid;
      case 51:
        return props_ImportList;
      case 52:
        return props_Infix;
      case 53:
        return props_InfixAbstract;
      case 54:
        return props_Infixl;
      case 55:
        return props_Infixr;
      case 56:
        return props_Instance;
      case 57:
        return props_IntegerValue;
      case 58:
        return props_LCQArrowAssignment;
      case 59:
        return props_LCQGuard;
      case 60:
        return props_LCQLet;
      case 61:
        return props_LCQualifier;
      case 62:
        return props_LDAnnotation;
      case 63:
        return props_LDFunDef;
      case 64:
        return props_LPExpression;
      case 65:
        return props_LPLambda;
      case 66:
        return props_Lambda;
      case 67:
        return props_LambdaPart;
      case 68:
        return props_Let;
      case 69:
        return props_LetDefinition;
      case 70:
        return props_LetDefinitions;
      case 71:
        return props_LineComment;
      case 72:
        return props_List;
      case 73:
        return props_ListComprehension;
      case 74:
        return props_ListEnumeration;
      case 75:
        return props_ListRange;
      case 76:
        return props_Literal;
      case 77:
        return props_MPModule;
      case 78:
        return props_MPSCONID;
      case 79:
        return props_MPSVARID;
      case 80:
        return props_MPSimple;
      case 81:
        return props_Main;
      case 82:
        return props_Module;
      case 83:
        return props_ModulePart;
      case 84:
        return props_NodeCONID;
      case 85:
        return props_NodeOperator;
      case 86:
        return props_NodeVARID;
      case 87:
        return props_PConstructor;
      case 88:
        return props_PList;
      case 89:
        return props_PListBrackets;
      case 90:
        return props_PListDot;
      case 91:
        return props_PListVar;
      case 92:
        return props_PLiteral;
      case 93:
        return props_PTuple;
      case 94:
        return props_PVarName;
      case 95:
        return props_PVarWildcard;
      case 96:
        return props_PVariable;
      case 97:
        return props_Pattern;
      case 98:
        return props_PatternArgument;
      case 99:
        return props_PatternFunction;
      case 100:
        return props_PatternOperator;
      case 101:
        return props_QCONID;
      case 102:
        return props_QVARID;
      case 103:
        return props_Resource;
      case 104:
        return props_Rho;
      case 105:
        return props_Simpletype;
      case 106:
        return props_Simpletypes;
      case 107:
        return props_Skeleton;
      case 108:
        return props_StringValue;
      case 109:
        return props_Tau;
      case 110:
        return props_Term;
      case 111:
        return props_TopExpression;
      case 112:
        return props_Tuple;
      case 113:
        return props_Type;
      case 114:
        return props_TypeBrackets;
      case 115:
        return props_TypeList;
      case 116:
        return props_TypeName;
      case 117:
        return props_TypeTuple;
      case 118:
        return props_TypeVariable;
      case 119:
        return props_UnaryOPExpression;
      case 120:
        return props_Underscore;
      case 121:
        return props_WherePart;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
