package BaseFrege.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class ListComprehension_RemoveComprehension {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ListComprehension_RemoveComprehension.ListComprehension_RemoveComprehension_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new ListComprehension_RemoveComprehension.ListComprehension_RemoveComprehension_BACKSPACE(node));
  }
  public static class ListComprehension_RemoveComprehension_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ListComprehension_RemoveComprehension_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Falls back to a simple enumeration list.";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode listEnumeration = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd02L, "BaseFrege.structure.ListEnumeration")), null);
      ListSequence.fromList(SLinkOperations.getChildren(listEnumeration, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd02L, 0x5aa4f79b7b0fdd05L, "items"))).setElement(0, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd64L, 0x5aa4f79b7b0fdd9bL, "expression")));

      SNodeOperations.replaceWithAnother(node, listEnumeration);
      SelectionUtil.selectCell(editorContext, listEnumeration, SelectionManager.LAST_EDITABLE_CELL);
    }
  }
  public static class ListComprehension_RemoveComprehension_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ListComprehension_RemoveComprehension_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Falls back to a simple enumeration list.";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode listEnumeration = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd02L, "BaseFrege.structure.ListEnumeration")), null);
      ListSequence.fromList(SLinkOperations.getChildren(listEnumeration, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd02L, 0x5aa4f79b7b0fdd05L, "items"))).setElement(0, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd64L, 0x5aa4f79b7b0fdd9bL, "expression")));

      SNodeOperations.replaceWithAnother(node, listEnumeration);
      SelectionUtil.selectCell(editorContext, listEnumeration, SelectionManager.LAST_EDITABLE_CELL);
    }
  }
}
