package BaseFrege.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AIOperator_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AIVariable_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Annotation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BCLine_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BCNestedComment_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BinExPart_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BinaryExpressions_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BlockComment_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BooleanValue_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new BracketsApplication_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CPExprToExpr_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new CPExprToGuards_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Case_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new CharValue_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ConstructorApplication_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ConstructorReference_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Context_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ContextPart_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new CoreBoolType_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new CoreCharType_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new CoreIntType_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Data_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new DataConstructor_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new DoubleValue_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new EmptyExpression_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Expression_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new FDABracket_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new FDAVarName_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new FDAVarWildcard_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new FDAssignment_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new FDGGuards_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new FDGrouped_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new FDGuards_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new Fixity_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new FullType_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new FunctionApplication_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new FunctionDefinition_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new FunctionTypeNode_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new GenericApplication_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new Guard_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new IIConstructor_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new IIFunction_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new IIOperator_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new IITCLAll_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new IITCLConstructor_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new IITConstructorList_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new IIType_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new IfThenElse_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new ImplicitDefinition_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new Import_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new ImportAs_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new ImportHiding_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new ImportItems_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new ImportReference_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new ImportedEntityApplication_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new ImportedTypeReferenceUsage_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new InfixAbstract_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new IntegerValue_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new LCQArrowAssignment_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new LCQGuard_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new LCQLet_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new LPExpression_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new LPLambda_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new Lambda_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new Let_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new LetDefinitions_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new LineComment_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new ListComprehension_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new ListEnumeration_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new ListRange_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new ListTypeNode_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new LocalTypeReferenceUsage_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new MEFunction_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new MEOperator_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new MEPMImport_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new MEPMSelf_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new MEPModule_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new METCLAll_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new METCLConstructor_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new METConstructorList_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new METype_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new Main_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new Module_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new ModuleNameFinal_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new ModuleNamePreFinal_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new NodeCONID_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new NodeOperator_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new NodeVARID_Editor());
      case 89:
        return Collections.<ConceptEditor>singletonList(new OperatorApplication_Editor());
      case 90:
        return Collections.<ConceptEditor>singletonList(new OperatorReference_Editor());
      case 91:
        return Collections.<ConceptEditor>singletonList(new PBracket_Editor());
      case 92:
        return Collections.<ConceptEditor>singletonList(new PConstructor_Editor());
      case 93:
        return Collections.<ConceptEditor>singletonList(new PLEBPatternArgument_Editor());
      case 94:
        return Collections.<ConceptEditor>singletonList(new PLEBPlaceholder_Editor());
      case 95:
        return Collections.<ConceptEditor>singletonList(new PListBracket_Editor());
      case 96:
        return Collections.<ConceptEditor>singletonList(new PListColon_Editor());
      case 97:
        return Collections.<ConceptEditor>singletonList(new PListVar_Editor());
      case 98:
        return Collections.<ConceptEditor>singletonList(new PLiteral_Editor());
      case 99:
        return Collections.<ConceptEditor>singletonList(new PTuple_Editor());
      case 100:
        return Collections.<ConceptEditor>singletonList(new PVarName_Editor());
      case 101:
        return Collections.<ConceptEditor>singletonList(new PVarOperator_Editor());
      case 102:
        return Collections.<ConceptEditor>singletonList(new PVarWildcard_Editor());
      case 103:
        return Collections.<ConceptEditor>singletonList(new PatternFunction_Editor());
      case 104:
        return Collections.<ConceptEditor>singletonList(new PatternFunctionInGroup_Editor());
      case 105:
        return Collections.<ConceptEditor>singletonList(new PatternOperator_Editor());
      case 106:
        return Collections.<ConceptEditor>singletonList(new PatternOperatorInGroup_Editor());
      case 107:
        return Collections.<ConceptEditor>singletonList(new PatternWrapper_Editor());
      case 108:
        return Collections.<ConceptEditor>singletonList(new QCONID_Editor());
      case 109:
        return Collections.<ConceptEditor>singletonList(new QVARID_Editor());
      case 110:
        return Collections.<ConceptEditor>singletonList(new Skeleton_Editor());
      case 111:
        return Collections.<ConceptEditor>singletonList(new StringValue_Editor());
      case 112:
        return Collections.<ConceptEditor>singletonList(new Tuple_Editor());
      case 113:
        return Collections.<ConceptEditor>singletonList(new TupleTypeNode_Editor());
      case 114:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 115:
        return Collections.<ConceptEditor>singletonList(new TypeA_Editor());
      case 116:
        return Collections.<ConceptEditor>singletonList(new TypeB_Editor());
      case 117:
        return Collections.<ConceptEditor>singletonList(new TypeFunction_Editor());
      case 118:
        return Collections.<ConceptEditor>singletonList(new TypeList_Editor());
      case 119:
        return Collections.<ConceptEditor>singletonList(new TypeName_Editor());
      case 120:
        return Collections.<ConceptEditor>singletonList(new TypeReference_Editor());
      case 121:
        return Collections.<ConceptEditor>singletonList(new TypeTuple_Editor());
      case 122:
        return Collections.<ConceptEditor>singletonList(new TypeVariable_Editor());
      case 123:
        return Collections.<ConceptEditor>singletonList(new TypeVariableReference_Editor());
      case 124:
        return Collections.<ConceptEditor>singletonList(new UndecidableTypeNode_Editor());
      case 125:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      case 126:
        return Collections.<ConceptEditor>singletonList(new WherePart_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0c.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a2, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new IfThenElse_Editor1());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new IfThenElse_Editor2());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0e.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new ApplicationEntity_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new BinExPart_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new BinaryExpressions_TransformationMenu());
      case 3:
        return Collections.<TransformationMenu>singletonList(new ConstructorReference_TransformationMenu());
      case 4:
        return Collections.<TransformationMenu>singletonList(new DataConstructor_TransformationMenu());
      case 5:
        return Collections.<TransformationMenu>singletonList(new Expression_TransformationMenu());
      case 6:
        return Collections.<TransformationMenu>singletonList(new FDAVarName_TransformationMenu());
      case 7:
        return Collections.<TransformationMenu>singletonList(new FDAVarWildcard_TransformationMenu());
      case 8:
        return Collections.<TransformationMenu>singletonList(new FullType_TransformationMenu());
      case 9:
        return Collections.<TransformationMenu>singletonList(new GenericApplication_TransformationMenu());
      case 10:
        return Collections.<TransformationMenu>singletonList(new ImportAH_TransformationMenu());
      case 11:
        return Collections.<TransformationMenu>singletonList(new List_TransformationMenu());
      case 12:
        return Collections.<TransformationMenu>singletonList(new Literal_TransformationMenu());
      case 13:
        return Collections.<TransformationMenu>singletonList(new ModuleName_TransformationMenu());
      case 14:
        return Collections.<TransformationMenu>singletonList(new ModuleNameFinal_TransformationMenu());
      case 15:
        return Collections.<TransformationMenu>singletonList(new NodeCONID_TransformationMenu());
      case 16:
        return Collections.<TransformationMenu>singletonList(new NodeVARID_TransformationMenu());
      case 17:
        return Collections.<TransformationMenu>singletonList(new PList_TransformationMenu());
      case 18:
        return Collections.<TransformationMenu>singletonList(new PatternArgument_TransformationMenu());
      case 19:
        return Collections.<TransformationMenu>singletonList(new PrimaryExpression_TransformationMenu());
      case 20:
        return Collections.<TransformationMenu>singletonList(new Simpletype_TransformationMenu());
      case 21:
        return Collections.<TransformationMenu>singletonList(new Term_TransformationMenu());
      case 22:
        return Collections.<TransformationMenu>singletonList(new TopExpression_TransformationMenu());
      case 23:
        return Collections.<TransformationMenu>singletonList(new TypeFunction_TransformationMenu());
      case 24:
        return Collections.<TransformationMenu>singletonList(new TypeName_TransformationMenu());
      case 25:
        return Collections.<TransformationMenu>singletonList(new TypeReference_TransformationMenu());
      case 26:
        return Collections.<TransformationMenu>singletonList(new TypeVariable_TransformationMenu());
      case 27:
        return Collections.<TransformationMenu>singletonList(new TypeVariableReference_TransformationMenu());
      case 28:
        return Collections.<TransformationMenu>singletonList(new VariableReference_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (index_xbvbvu_a0f.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Annotation_AddItem()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new BinaryExpression_AddAnnotation()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ConstructorReference_AddPatternArgumentForPConstructor()});
            default:
          }
        }
        break;
      case 3:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Expression_AddWhereClause()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new Expression_BracketsToTuple()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new Expression_ListEnumerationToComprehension()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new Expression_ListEnumerationToRange()});
            default:
          }
        }
        break;
      case 4:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0e1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new FDABracket_TransformWhenInsideBracketst()});
            default:
          }
        }
        break;
      case 5:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0f1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Import_AddAHI()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new Import_AddItems()});
            default:
          }
        }
        break;
      case 6:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0g1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Module_AddExport()});
            default:
          }
        }
        break;
      case 7:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0h1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new NodeCONID_AddSimpletypeForDataContructor()});
            default:
          }
        }
        break;
      case 8:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0i1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_AddFunctionArgument()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_AddPatternArgumentForPConstructor()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_FunctionTransformation()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_OperatorTransformations()});
            case 4:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_PBracketToListOrTuple()});
            case 5:
              return Arrays.asList(new TransformationMenu[]{new PatternArgument_SetFunctionDefinitionToAssignmentOrGuard()});
            default:
          }
        }
        break;
      case 9:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0j1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Simpletype_AddSimpletypeForDataConstructor()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new Simpletype_AddSimpletypeForTypeReferenceUsage()});
            default:
          }
        }
        break;
      case 10:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0k1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new TypeName_AddTypeVariableForData()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new TypeName_AddTypeVariableForType()});
            default:
          }
        }
        break;
      case 11:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0l1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new TypeReference_AddConstructorListForIIType()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new TypeReference_AddConstructorListForMEType()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new TypeReference_AddSimpletypeForTypeReferenceUsage()});
            default:
          }
        }
        break;
      case 12:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0m1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new TypeTuple_AddAnother()});
            default:
          }
        }
        break;
      case 13:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0n1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new TypeVariable_AddTypeVariableForData()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new TypeVariable_AddTypeVariableForType()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0g.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AIOperator_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new AIVariable_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new AnnotationItem_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new BCContent_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new ConstructorApplication_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new Definition_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new DoubleValue_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new EmptyExpression_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new EmptyLine_SubstituteMenu());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new Expression_SubstituteMenu());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new FDAVarName_SubstituteMenu());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new FDAssignment_SubstituteMenu());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new FDGrouped_SubstituteMenu());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new FDGuards_SubstituteMenu());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new FunctionApplication_SubstituteMenu());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new FunctionDefinition_SubstituteMenu());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GenericApplication_SubstituteMenu());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new IIConstructor_SubstituteMenu());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new IIFunction_SubstituteMenu());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new IIOperator_SubstituteMenu());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new IITCLConstructor_SubstituteMenu());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new IIType_SubstituteMenu());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new ImplicitDefinition_SubstituteMenu());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new ImportedEntityApplication_SubstituteMenu());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new ImportedTypeReferenceUsage_SubstituteMenu());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new IntegerValue_SubstituteMenu());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new ListComprehension_SubstituteMenu());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new ListRange_SubstituteMenu());
      case 28:
        return Collections.<SubstituteMenu>singletonList(new Literal_SubstituteMenu());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new LocalTypeReferenceUsage_SubstituteMenu());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new MEFunction_SubstituteMenu());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new MEOperator_SubstituteMenu());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new METCLConstructor_SubstituteMenu());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new METype_SubstituteMenu());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new ModuleNamePreFinal_SubstituteMenu());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new NodeCONID_SubstituteMenu());
      case 36:
        return Collections.<SubstituteMenu>singletonList(new NodeVARID_SubstituteMenu());
      case 37:
        return Collections.<SubstituteMenu>singletonList(new OperatorApplication_SubstituteMenu());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new PConstructor_SubstituteMenu());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new PLEBPatternArgument_SubstituteMenu());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new PLEBPlaceholder_SubstituteMenu());
      case 41:
        return Collections.<SubstituteMenu>singletonList(new PList_SubstituteMenu());
      case 42:
        return Collections.<SubstituteMenu>singletonList(new PListColon_SubstituteMenu());
      case 43:
        return Collections.<SubstituteMenu>singletonList(new PListVar_SubstituteMenu());
      case 44:
        return Collections.<SubstituteMenu>singletonList(new PLiteral_SubstituteMenu());
      case 45:
        return Collections.<SubstituteMenu>singletonList(new PTuple_SubstituteMenu());
      case 46:
        return Collections.<SubstituteMenu>singletonList(new PVarName_SubstituteMenu());
      case 47:
        return Collections.<SubstituteMenu>singletonList(new PVariable_SubstituteMenu());
      case 48:
        return Collections.<SubstituteMenu>singletonList(new PatternArgument_SubstituteMenu());
      case 49:
        return Collections.<SubstituteMenu>singletonList(new PatternFunction_SubstituteMenu());
      case 50:
        return Collections.<SubstituteMenu>singletonList(new PatternFunctionInGroup_SubstituteMenu());
      case 51:
        return Collections.<SubstituteMenu>singletonList(new PatternOperator_SubstituteMenu());
      case 52:
        return Collections.<SubstituteMenu>singletonList(new PatternOperatorInGroup_SubstituteMenu());
      case 53:
        return Collections.<SubstituteMenu>singletonList(new Simpletype_SubstituteMenu());
      case 54:
        return Collections.<SubstituteMenu>singletonList(new TopExpression_SubstituteMenu());
      case 55:
        return Collections.<SubstituteMenu>singletonList(new Tuple_SubstituteMenu());
      case 56:
        return Collections.<SubstituteMenu>singletonList(new TypeA_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (index_xbvbvu_a0h.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new Definition_SubstituteToFDAVarName()});
            case 1:
              return Arrays.asList(new SubstituteMenu[]{new Definition_SubstituteToFixity()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3894ecaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3894ebaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8c0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d655e2aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x100cc1cc53ffb707L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f022735fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d655e0fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d90cL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235dafL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3f8a8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3f8d2L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d93bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d908L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedebfe7dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53091a40f7d3538eL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1b099fc7c901af79L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1b099fc7c901afa7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x9228a669f77f058L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x9228a669f77f039L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x9228a669f77ed97L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d904L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x608e2b4f233247d0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d90bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x6ff7dcdd48f4eaabL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x100cc1cc541493b9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0xc54adc878e2e874L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0xc54adc878e2e87bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x26ffe1f9af84fcc3L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3dceaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x2c5b28a4a146e49fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3dcebL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8c2L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3893019L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedec445dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x45da4fd5064877c7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d926L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1546fb5201c3f12L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30a6c3a8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c31780df9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e906599L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e90659aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e90659dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e906535L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d994L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5d5f9b6a6ea5cdf1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30a60967L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30a60968L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389112dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7f24f41c3f28279eL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7f24f41c3f273a81L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1546fb52035f167L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b32dcdL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d90aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fde27L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fde51L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdddfL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3575c62ea7ed3709L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3575c62ea7ed3719L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d907L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d995L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x66fa4fc65829ede0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d655de7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd64L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd02L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd34L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65ea05L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c3006a1dbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30145069L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30218792L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c3021876dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38868c6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e5e0c00L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e5e0c1fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e5e0bc3L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e518cb6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8a6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c2fa108aaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c2fa108cbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedec89a3L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0258a57L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x75a03de5fd2a22cdL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d74L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d73L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38952abL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895253L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x2172e4e5ac3793bbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951fbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895194L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951c8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1db1c5d8465bf8faL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985a6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049a298fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d909L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d903L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x2854fa195e0a238bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724ebcd01cL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724ee53d72L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65ea2dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d662e92L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e0bcL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e04bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d662e79L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f4L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724ebcd023L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0258a31L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d993L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d994L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c325a97b8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f022735fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53091a40f7d3538eL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x608e2b4f233247d0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0xc54adc878e2e87bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x26ffe1f9af84fcc3L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3893019L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30a60966L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d902L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1987c8739f322057L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c2fa0f90fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c2fa108aaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895193L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0235974L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8edL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3ddeeL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65ea2dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e0bcL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e04bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f4L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724ebcd023L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0258a31L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8c0L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53091a40f7d3538eL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0xc54adc878e2e874L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d877L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d830L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895193L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e0bcL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724e94e04bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d662e79L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f4L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0g = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3894ecaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3894ebaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3894eb9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x100cc1cc53ffb6dcL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedebfe7dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d89fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d90bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x6ff7dcdd48f4eaabL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x100cc1cc541493b9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8d7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0xc54adc878e2e87bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3dceaL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3dcebL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedec445dL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x45da4fd5064877c7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1546fb5201c3f12L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30a6c3a8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c31780df9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e90659aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e906535L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5d5f9b6a6ea5cdf1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7f24f41c3f273a81L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1546fb52035f167L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d90aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd64L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5aa4f79b7b0fdd34L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1987c8739f322057L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65ea05L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c3006a1dbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c30145069L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e5e0c1fL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1abe72387e518cb6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d75775c2fa108cbL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7a213c18049985e2L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53fc7efdedec89a3L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d74L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d73L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f7L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895253L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f9L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951faL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895193L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895194L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa2841626bL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951c8L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x76d2ad9a0d65e9f1L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5feee6d035b3ddeeL), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d903L), MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x253325724ebcd01cL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0h = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d89fL)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a2 = new String[]{"BaseFrege.editor.IfThenElse_Editor1", "BaseFrege.editor.IfThenElse_Editor2"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a5 = new String[]{"BaseFrege.editor.Annotation_AddItem"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a5 = new String[]{"BaseFrege.editor.BinaryExpression_AddAnnotation"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a5 = new String[]{"BaseFrege.editor.ConstructorReference_AddPatternArgumentForPConstructor"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d1a5 = new String[]{"BaseFrege.editor.Expression_AddWhereClause", "BaseFrege.editor.Expression_BracketsToTuple", "BaseFrege.editor.Expression_ListEnumerationToComprehension", "BaseFrege.editor.Expression_ListEnumerationToRange"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0e1a5 = new String[]{"BaseFrege.editor.FDABracket_TransformWhenInsideBracketst"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0f1a5 = new String[]{"BaseFrege.editor.Import_AddAHI", "BaseFrege.editor.Import_AddItems"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0g1a5 = new String[]{"BaseFrege.editor.Module_AddExport"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0h1a5 = new String[]{"BaseFrege.editor.NodeCONID_AddSimpletypeForDataContructor"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0i1a5 = new String[]{"BaseFrege.editor.PatternArgument_AddFunctionArgument", "BaseFrege.editor.PatternArgument_AddPatternArgumentForPConstructor", "BaseFrege.editor.PatternArgument_FunctionTransformation", "BaseFrege.editor.PatternArgument_OperatorTransformations", "BaseFrege.editor.PatternArgument_PBracketToListOrTuple", "BaseFrege.editor.PatternArgument_SetFunctionDefinitionToAssignmentOrGuard"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0j1a5 = new String[]{"BaseFrege.editor.Simpletype_AddSimpletypeForDataConstructor", "BaseFrege.editor.Simpletype_AddSimpletypeForTypeReferenceUsage"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0k1a5 = new String[]{"BaseFrege.editor.TypeName_AddTypeVariableForData", "BaseFrege.editor.TypeName_AddTypeVariableForType"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0l1a5 = new String[]{"BaseFrege.editor.TypeReference_AddConstructorListForIIType", "BaseFrege.editor.TypeReference_AddConstructorListForMEType", "BaseFrege.editor.TypeReference_AddSimpletypeForTypeReferenceUsage"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0m1a5 = new String[]{"BaseFrege.editor.TypeTuple_AddAnother"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0n1a5 = new String[]{"BaseFrege.editor.TypeVariable_AddTypeVariableForData", "BaseFrege.editor.TypeVariable_AddTypeVariableForType"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a7 = new String[]{"BaseFrege.editor.Definition_SubstituteToFDAVarName", "BaseFrege.editor.Definition_SubstituteToFixity"};
}
