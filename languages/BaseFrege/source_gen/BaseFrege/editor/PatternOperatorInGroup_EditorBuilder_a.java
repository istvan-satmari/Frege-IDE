package BaseFrege.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import BaseFrege.behavior.PatternOperatorInGroup__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;

/*package*/ class PatternOperatorInGroup_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public PatternOperatorInGroup_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_muo84z_a();
  }

  private EditorCell createCollection_muo84z_a() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_muo84z_a");
    editorCell.setBig(true);
    editorCell.setCellContext(getCellFactory().getCellContext());
    editorCell.addEditorCell(createRefNode_muo84z_a0());
    editorCell.addEditorCell(createModelAccess_muo84z_b0());
    editorCell.addEditorCell(createRefNode_muo84z_c0());
    return editorCell;
  }
  private EditorCell createRefNode_muo84z_a0() {
    SingleRoleCellProvider provider = new PatternOperatorInGroup_EditorBuilder_a.argumentLeftSingleRoleHandler_muo84z_a0(myNode, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b7L, "argumentLeft"), getEditorContext());
    return provider.createCell();
  }
  private static class argumentLeftSingleRoleHandler_muo84z_a0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public argumentLeftSingleRoleHandler_muo84z_a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b7L, "argumentLeft"), child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b7L, "argumentLeft"), child));
      installCellInfo(child, editorCell);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new SChildSubstituteInfo(editorCell));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("argumentLeft");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b7L, "argumentLeft")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_argumentLeft");
        installCellInfo(null, editorCell);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no argumentLeft>";
    }
  }
  private EditorCell createModelAccess_muo84z_b0() {
    ModelAccessor modelAccessor = new ModelAccessor() {
      public String getText() {
        return (String) PatternOperatorInGroup__BehaviorDescriptor.GetOperator_id4QVy75p6$d9.invoke(myNode);
      }
      public void setText(String text) {
        PatternOperatorInGroup__BehaviorDescriptor.SetOperator_id4QVy75p6$dn.invoke(myNode, text);
      }
      public boolean isValidText(String text) {
        return (boolean) PatternOperatorInGroup__BehaviorDescriptor.IsValidOperator_id4QVy75p6NQk.invoke(myNode, text);
      }
    };
    EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), modelAccessor, myNode);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ModelAccess_muo84z_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_muo84z_c0() {
    SingleRoleCellProvider provider = new PatternOperatorInGroup_EditorBuilder_a.argumentRightSingleRoleHandler_muo84z_c0(myNode, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b8L, "argumentRight"), getEditorContext());
    return provider.createCell();
  }
  private static class argumentRightSingleRoleHandler_muo84z_c0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public argumentRightSingleRoleHandler_muo84z_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b8L, "argumentRight"), child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b8L, "argumentRight"), child));
      installCellInfo(child, editorCell);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new SChildSubstituteInfo(editorCell));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("argumentRight");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4dbb8871591a2c8aL, 0x4dbb8871591a34b8L, "argumentRight")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_argumentRight");
        installCellInfo(null, editorCell);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no argumentRight>";
    }
  }
}
