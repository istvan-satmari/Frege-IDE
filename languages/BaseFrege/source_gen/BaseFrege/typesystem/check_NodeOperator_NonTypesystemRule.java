package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_NodeOperator_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_NodeOperator_NonTypesystemRule() {
  }
  public void applyRule(final SNode operator, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Check if our operator is not null, otherwise skip the checking rule 
    if ((operator == null) || isEmptyString(SPropertyOperations.getString(operator, MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L, 0x5b03d9040f58aa31L, "value")))) {
      return;
    }

    // Reserved operators: ..  :  ::  =  \  |  <-  ->  @  ~  => 
    String[] reserved = new String[]{"->", "<-", "=>", "..", "::", "=", "\\", "|", "@", "~"};
    if (Sequence.fromIterable(Sequence.fromArray(reserved)).any(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return it.equals(SPropertyOperations.getString(operator, MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L, 0x5b03d9040f58aa31L, "value")));
      }
    })) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(operator, "Reserved operator not allowed here.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "230222862491443016", null, errorTarget);
      }
    }

    // Dashes: -- (2 and more always act like a comment) 
    if (SPropertyOperations.getString(operator, MetaAdapterFactory.getProperty(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L, 0x5b03d9040f58aa31L, "value")).startsWith("--")) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(operator, "Custom operator cannot start with dashes.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "230222862491449108", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1cff861b633abcd8L, "BaseFrege.structure.NodeOperator");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
