package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_PListVar_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_PListVar_InferenceRule() {
  }
  public void applyRule(final SNode pListVar, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Do we really act like a list variable? 
    SNode parent = SNodeOperations.getParent(pListVar);
    if (SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895253L, "BaseFrege.structure.PListColon")) && SLinkOperations.getTarget(SNodeOperations.cast(parent, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895253L, "BaseFrege.structure.PListColon")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895253L, 0x3f5c5828a3895256L, "tail")) == pListVar) {
      // Yes 
      {
        final SNode typeFromParent = typeCheckingContext.typeOf(SLinkOperations.getTarget(pListVar, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179289194", true);
        typeCheckingContext.whenConcrete(typeFromParent, new Runnable() {
          public void run() {
            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L, "BaseFrege.structure.UnknownTypeNode"))) {
              // Case 1: No type is provided from the parent 
              {
                SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SLinkOperations.getTarget(pListVar, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL, 0x3f5c5828a389529cL, "variable")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179314484", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179303734", true), (SNode) _quotation_createNode_om4o1q_a0b0a0b0c0b(), _info_12389875345);
              }

            } else if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, "BaseFrege.structure.ListTypeNode"))) {
              // Case 2: Type from the parent is correctly set to be list 
              {
                SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SLinkOperations.getTarget(pListVar, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL, 0x3f5c5828a389529cL, "variable")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179318782", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179318788", true), (SNode) typeCheckingContext.getExpandedNode(typeFromParent), _info_12389875345);
              }

            } else {
              // Case 3: Type from the parent is incorrect 
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(pListVar, "Found list type argument but declared is " + typeCheckingContext.getExpandedNode(typeFromParent) + ".", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179289094", null, errorTarget);
              }
              return;
            }
          }
        }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179289045", false, false);
      }

      // Set as the child's type 
      {
        SNode _nodeToCheck_1029348928467 = pListVar;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928406942682", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928406942686", true), (SNode) SLinkOperations.getTarget(pListVar, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL, 0x3f5c5828a389529cL, "variable")), _info_12389875345);
      }

    } else {
      // No 
      {
        SNode _nodeToCheck_1029348928467 = pListVar;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928406934088", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928406934092", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(pListVar, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL, 0x3f5c5828a389529cL, "variable")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928406934157", true), _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a389529bL, "BaseFrege.structure.PListVar");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_om4o1q_a0b0a0b0c0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x534698153429d2f0L, "ListTypeNode"), null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x4f4212f5c8d48453L, "UnknownTypeNode"), null, null, false);
    quotedNode_1.addChild(MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, 0x534698153429d2f1L, "itemsType"), quotedNode_2);
    return quotedNode_1;
  }
}
