package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import BaseFrege.behavior.FDComplete__BehaviorDescriptor;
import BaseFrege.behavior.Annotation__BehaviorDescriptor;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_PVarName_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_PVarName_InferenceRule() {
  }
  public void applyRule(final SNode pVarName, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(pVarName), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1db1c5d8465bf8faL, "BaseFrege.structure.PatternWrapper"))) {
      // A very special case for when this is a constant functio 

      // Find the (typed) right side of the current definition 
      final SNode typedDefinitionNode = FDComplete__BehaviorDescriptor.getTypedDefinitionNode_id2LraaixmJl3.invoke(SNodeOperations.getNodeAncestor(pVarName, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d7900fe84e0386eL, "BaseFrege.structure.FDComplete"), false, false));

      // If there is an annotation, check the type against it 
      final SNode annotation = Annotation__BehaviorDescriptor.findForVariable_idRvZSuXQxj1.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d8c0L, "BaseFrege.structure.Annotation")), SNodeOperations.getNodeAncestor(pVarName, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x7fa876a53c3d82fL, "BaseFrege.structure.Skeleton"), false, false), pVarName);
      if ((annotation != null)) {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
          {
            SNode _nodeToCheck_1029348928467 = typedDefinitionNode;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185576963", 0, null);
            typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185576985", true), (SNode) typeCheckingContext.typeOf(annotation, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185577154", true), true, true, _info_12389875345);
          }
        }
      }

      // Set the resulting type of the current node 
      {
        SNode _nodeToCheck_1029348928467 = pVarName;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185578625", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185578629", true), (SNode) typeCheckingContext.typeOf(typedDefinitionNode, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185580128", true), _info_12389875345);
      }
    } else {

      // Otherwise the type of the pattern variable is defined by its parent 
      {
        SNode _nodeToCheck_1029348928467 = pVarName;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185552395", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185551848", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(pVarName, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "3601646638185552413", true), _info_12389875345);
      }

      // Trigger the type evaluation of the variable (we need to have _typeFilledByParent actually filled) 
      final SNode tv_typevar_2675082928423635428 = typeCheckingContext.createNewRuntimeTypesVariable();
      {
        SNode _nodeToCheck_1029348928467 = SNodeOperations.getNodeAncestor(pVarName, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d7900fe84e0386eL, "BaseFrege.structure.FDComplete"), false, false);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928423635429", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.getRepresentative(tv_typevar_2675082928423635428), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928423635431", true), _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895209L, "BaseFrege.structure.PVarName");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
