package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import BaseFrege.behavior.TypeWaiter;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.EquationInfo;
import BaseFrege.behavior.FunctionTypeHelper;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_GenericApplication_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_GenericApplication_InferenceRule() {
  }
  public void applyRule(final SNode genericApplication, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Wait for the evaluation of the childrens' types 
    TypeWaiter tw = new TypeWaiter() {
      protected void waitForNode(final SNode node) {
        {
          final SNode nodeType = typeCheckingContext.typeOf(node, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098490923238", true);
          typeCheckingContext.whenConcrete(nodeType, new Runnable() {
            public void run() {
              nodeWaited(typeCheckingContext.getExpandedNode(nodeType));
            }
          }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098490923233", false, false);
        }
      }

      protected void waitingFinished(List<SNode> nodeTypes) {
        // Find out the type of the entity we want to apply 
        SNode aentityType = ListSequence.fromList(nodeTypes).removeLastElement();

        if (SNodeOperations.isInstanceOf(aentityType, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode")) && ListSequence.fromList(nodeTypes).count() > 0) {
          // Case 1: Deal with the function application 
          final SNode ftn = SNodeOperations.cast(aentityType, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"));

          // Check that the number of arguments does not exceed amount of applicable arguments 
          int realArgumentsCount = ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).count() - 1;
          if (realArgumentsCount < ListSequence.fromList(nodeTypes).count()) {
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(genericApplication, "Amount of applied arguments exceeded, may only use up to " + realArgumentsCount + " arguments.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098490964995", null, errorTarget);
            }
          }

          // Check the types of the used arguments 
          for (int i = 0; i < Math.min(ListSequence.fromList(nodeTypes).count(), realArgumentsCount); i++) {
            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(ListSequence.fromList(nodeTypes).getElement(i), ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).getElement(i)))) {
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ListSequence.fromList(SLinkOperations.getChildren(genericApplication, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x1d87d6d81a2ba521L, "arguments"))).getElement(i), "Expected argument " + ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).getElement(i) + " but " + ListSequence.fromList(nodeTypes).getElement(i) + " found.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098491147529", null, errorTarget);
              }
            }
          }

          // Return the type of the current function application 
          {
            SNode _nodeToCheck_1029348928467 = genericApplication;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928418348480", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928418348483", true), (SNode) FunctionTypeHelper.getReturnType(ftn, ListSequence.fromList(nodeTypes).count()), _info_12389875345);
          }

        } else {
          // Otherwise we only propagate the type from the applied entity out 
          {
            SNode _nodeToCheck_1029348928467 = genericApplication;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098491008447", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5229219098491007637", true), (SNode) aentityType, _info_12389875345);
          }

          // Check, however, that no arguments are provided 
          if (!(SNodeOperations.isInstanceOf(aentityType, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L, "BaseFrege.structure.UnknownTypeNode")))) {
            if (ListSequence.fromList(SLinkOperations.getChildren(genericApplication, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x1d87d6d81a2ba521L, "arguments"))).count() > 0) {
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(genericApplication, "Cannot provide function arguments here.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "1231066225851093241", null, errorTarget);
              }
            }
          }
        }
      }
    };
    List<SNode> nodesToWaitFor = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(nodesToWaitFor).addSequence(ListSequence.fromList(SLinkOperations.getChildren(genericApplication, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x1d87d6d81a2ba521L, "arguments"))));
    ListSequence.fromList(nodesToWaitFor).addElement(SLinkOperations.getTarget(genericApplication, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, 0x3d75775c325bdda4L, "aentity")));
    tw.waitFor(nodesToWaitFor);
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x1d87d6d81a2ba502L, "BaseFrege.structure.GenericApplication");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
