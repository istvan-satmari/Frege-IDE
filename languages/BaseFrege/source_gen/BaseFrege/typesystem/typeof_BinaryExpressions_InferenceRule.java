package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.typesystem.inference.EquationInfo;
import BaseFrege.behavior.ExpressionParser;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_BinaryExpressions_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BinaryExpressions_InferenceRule() {
  }
  public void applyRule(final SNode be, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Special case, for when the current BinaryExpression is an implicit definition 
    if (SNodeOperations.isInstanceOf(be, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5d5f9b6a6ea5cdf1L, "BaseFrege.structure.ImplicitDefinition"))) {
      {
        SNode _nodeToCheck_1029348928467 = be;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "14214889683038996", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "14214889683038420", true), (SNode) _quotation_createNode_qs6lrl_a0a0b0b(), _info_12389875345);
      }
      return;
    }

    // Use ExpressionEvaluator to help evaluate the expression with infix operators 
    final ExpressionParser parser = new ExpressionParser(be) {
      protected void evaluateDifferentAssociativities() {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(be, "Invalid expression, found operators with different associativity on the same level.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "7505881191560494773", null, errorTarget);
        }
      }
      protected void evaluateSeveralInfixOperators() {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(be, "Invalid expression, found several non-associative operators on the same level.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "7505881191560542969", null, errorTarget);
        }
      }
    };

    // Parse the expression 
    parser.initialize();
    parser.parse();

    // Infer the type of the current expression 
    if (parser.isParsed) {
      {
        SNode _nodeToCheck_1029348928467 = be;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408484498", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408483931", true), (SNode) typeCheckingContext.typeOf(parser.parsedExpression, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408484913", true), _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4b2fbc03f0227359L, "BaseFrege.structure.BinaryExpressions");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_qs6lrl_a0a0b0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x4f4212f5c8d48453L, "UnknownTypeNode"), null, null, false);
    return quotedNode_1;
  }
}
