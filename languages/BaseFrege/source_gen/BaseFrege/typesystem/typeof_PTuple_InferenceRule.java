package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_PTuple_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_PTuple_InferenceRule() {
  }
  public void applyRule(final SNode pTuple, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Infer the type for the current tuple 
    SNode tupleType = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, "BaseFrege.structure.TupleTypeNode")), null);
    ListSequence.fromList(SLinkOperations.getChildren(tupleType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).clear();

    // Gather the types of the items 
    ListSequence.fromList(SLinkOperations.getChildren(tupleType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).addElement(SNodeOperations.cast(typeCheckingContext.typeOf(SLinkOperations.getTarget(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x501541569b1e4c0cL, "firstItem")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408197044", true), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type")));
    for (int i = 0; i < ListSequence.fromList(SLinkOperations.getChildren(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x3f5c5828a38952d6L, "additionalItems"))).count(); i++) {
      ListSequence.fromList(SLinkOperations.getChildren(tupleType, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).addElement(SNodeOperations.cast(typeCheckingContext.typeOf(ListSequence.fromList(SLinkOperations.getChildren(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x3f5c5828a38952d6L, "additionalItems"))).getElement(i), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408180115", true), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type")));
    }

    // Set the resulting type of the current tuple node 
    {
      SNode _nodeToCheck_1029348928467 = pTuple;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408042266", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408042268", true), (SNode) tupleType, _info_12389875345);
    }


    // Deconstruct a given tuple type from a parent, if any, and pass to the children 
    {
      final SNode typeFromParent = typeCheckingContext.typeOf(SLinkOperations.getTarget(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179399888", true);
      typeCheckingContext.whenConcrete(typeFromParent, new Runnable() {
        public void run() {
          if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L, "BaseFrege.structure.UnknownTypeNode"))) {
            // Case 1: No type is provided from the parent 
            {
              SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SLinkOperations.getTarget(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x501541569b1e4c0cL, "firstItem")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179438587", 0, null);
              typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179417956", true), (SNode) _quotation_createNode_evxvu6_a0b0a0n0b(), _info_12389875345);
            }
            for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x3f5c5828a38952d6L, "additionalItems")))) {
              {
                SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(item, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179446873", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179439901", true), (SNode) _quotation_createNode_evxvu6_a0a0c0a0n0b(), _info_12389875345);
              }
            }

          } else if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, "BaseFrege.structure.TupleTypeNode"))) {
            // Case 2: Type from the parent is correctly set to be tuple 
            SNode ttn = SNodeOperations.cast(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, "BaseFrege.structure.TupleTypeNode"));

            // Check the length of the tuple 
            int usedItemsCount = ListSequence.fromList(SLinkOperations.getChildren(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x3f5c5828a38952d6L, "additionalItems"))).count() + 1;
            int declaredItemsCount = ListSequence.fromList(SLinkOperations.getChildren(ttn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).count();
            if (usedItemsCount != declaredItemsCount) {
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(pTuple, "Found " + usedItemsCount + " items but " + declaredItemsCount + " are declared.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179691996", null, errorTarget);
              }
            }

            // Check the types of the items 
            {
              SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SLinkOperations.getTarget(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x501541569b1e4c0cL, "firstItem")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179462546", 0, null);
              typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179447006", true), (SNode) ListSequence.fromList(SLinkOperations.getChildren(ttn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).first(), _info_12389875345);
            }
            for (int i = 0; i < Math.min(usedItemsCount, declaredItemsCount) - 1; i++) {
              {
                SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(pTuple, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, 0x3f5c5828a38952d6L, "additionalItems"))).getElement(i), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179582978", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179535564", true), (SNode) ListSequence.fromList(SLinkOperations.getChildren(ttn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x53469815345ff050L, 0x53469815345ff051L, "items"))).getElement(i + 1), _info_12389875345);
              }
            }

          } else {
            // Case 3: Type from the parent is incorrect 
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(pTuple, "Found tuple type argument but declared is " + typeCheckingContext.getExpandedNode(typeFromParent) + ".", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179399788", null, errorTarget);
            }
            return;
          }
        }
      }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179399739", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38951f6L, "BaseFrege.structure.PTuple");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_evxvu6_a0b0a0n0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x4f4212f5c8d48453L, "UnknownTypeNode"), null, null, false);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_evxvu6_a0a0c0a0n0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x4f4212f5c8d48453L, "UnknownTypeNode"), null, null, false);
    return quotedNode_1;
  }
}
