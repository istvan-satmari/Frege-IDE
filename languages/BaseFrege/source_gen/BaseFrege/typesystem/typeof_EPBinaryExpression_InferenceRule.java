package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import BaseFrege.behavior.EPNode__BehaviorDescriptor;
import jetbrains.mps.typesystem.inference.EquationInfo;
import BaseFrege.behavior.FunctionTypeHelper;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_EPBinaryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_EPBinaryExpression_InferenceRule() {
  }
  public void applyRule(final SNode epBinaryExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode operatorType = typeCheckingContext.typeOf(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getReferenceLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069eb85c6eL, "operator")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018661", true);
      typeCheckingContext.whenConcrete(operatorType, new Runnable() {
        public void run() {
          {
            final SNode leftOperandType = typeCheckingContext.typeOf(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069df9eb71L, "leftOperand")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018655", true);
            typeCheckingContext.whenConcrete(leftOperandType, new Runnable() {
              public void run() {
                {
                  final SNode rightOperandType = typeCheckingContext.typeOf(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069df9eb74L, "rightOperand")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018649", true);
                  typeCheckingContext.whenConcrete(rightOperandType, new Runnable() {
                    public void run() {
                      // The operator must be of type function 
                      if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(operatorType), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"))) {
                        SNode ftn = SNodeOperations.cast(typeCheckingContext.getExpandedNode(operatorType), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, "BaseFrege.structure.FunctionTypeNode"));

                        // The operator must accept 2 arguments 
                        if (ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).count() >= 3) {
                          // Check the type of the left argument 
                          SNode supposedLeftOperandType = ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).getElement(0);
                          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeCheckingContext.getExpandedNode(leftOperandType), supposedLeftOperandType))) {
                            {
                              MessageTarget errorTarget = new NodeMessageTarget();
                              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(EPNode__BehaviorDescriptor.getResponsibleNode_id58hJgquTViC.invoke(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069df9eb71L, "leftOperand"))), "The result of the subexpression should be " + supposedLeftOperandType + " but " + typeCheckingContext.getExpandedNode(leftOperandType) + " found.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621847354073", null, errorTarget);
                            }
                          }

                          // Check the type of the right argument 
                          SNode supposedRightOperandType = ListSequence.fromList(SLinkOperations.getChildren(ftn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153447f872L, 0x534698153447f873L, "arguments"))).getElement(1);
                          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeCheckingContext.getExpandedNode(rightOperandType), supposedRightOperandType))) {
                            {
                              MessageTarget errorTarget = new NodeMessageTarget();
                              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(EPNode__BehaviorDescriptor.getResponsibleNode_id58hJgquTViC.invoke(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069df9eb74L, "rightOperand"))), "The result of the subexpression should be " + supposedRightOperandType + " but " + typeCheckingContext.getExpandedNode(rightOperandType) + " found.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621848571633", null, errorTarget);
                            }
                          }

                          // Return the operator's return type 
                          {
                            SNode _nodeToCheck_1029348928467 = epBinaryExpression;
                            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621844503995", 0, null);
                            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621844503998", true), (SNode) FunctionTypeHelper.getReturnType(ftn, 2), _info_12389875345);
                          }
                        } else {
                          {
                            MessageTarget errorTarget = new NodeMessageTarget();
                            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getReferenceLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069eb85c6eL, "operator")), "Illegal operator type, operator must accept 2 arguments.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621843754245", null, errorTarget);
                          }
                        }
                      } else {
                        {
                          MessageTarget errorTarget = new NodeMessageTarget();
                          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(epBinaryExpression, MetaAdapterFactory.getReferenceLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, 0x5211bd069eb85c6eL, "operator")), "Illegal operator type, operator is not a function.", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621843753872", null, errorTarget);
                        }
                      }

                    }
                  }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018569", false, true);
                }
              }
            }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018567", false, true);
          }
        }
      }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "5913715621842018565", false, true);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x5211bd069df9eb70L, "BaseFrege.structure.EPBinaryExpression");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
