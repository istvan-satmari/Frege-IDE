package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import BaseFrege.behavior.FDComplete__BehaviorDescriptor;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_FDGrouped_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_FDGrouped_InferenceRule() {
  }
  public void applyRule(final SNode fdGrouped, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Evaluate the type of each matcher 
    final SNode matcherTypes_typevar_2675082928413367708 = typeCheckingContext.createNewRuntimeTypesVariable();
    for (SNode matcher : ListSequence.fromList(SLinkOperations.getChildren(fdGrouped, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, 0x155bf5aa28426dedL, "matchers")))) {
      if (SNodeOperations.isInstanceOf(matcher, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d7900fe84e0386eL, "BaseFrege.structure.FDComplete"))) {
        // To simplify, the type must be equal to all of the sub-nodes 
        // For some reason when using subtyping rule (:<=:), it does not work as expected  
        // (isSubtype() returns false when it should return true), so this is a counter-measure and a simplification 
        {
          SNode _nodeToCheck_1029348928467 = FDComplete__BehaviorDescriptor.getTypedDefinitionNode_id2LraaixmJl3.invoke(SNodeOperations.cast(matcher, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3d7900fe84e0386eL, "BaseFrege.structure.FDComplete")));
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928413374607", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.getRepresentative(matcherTypes_typevar_2675082928413367708), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928413374610", true), _info_12389875345);
        }
      }
    }

    // Infer the type of the current node 
    {
      SNode _nodeToCheck_1029348928467 = fdGrouped;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928414636330", 0, null);
      typeCheckingContext.createGreaterThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928414636335", true), (SNode) typeCheckingContext.getRepresentative(matcherTypes_typevar_2675082928413367708), false, true, _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x155bf5aa28426de7L, "BaseFrege.structure.FDGrouped");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
