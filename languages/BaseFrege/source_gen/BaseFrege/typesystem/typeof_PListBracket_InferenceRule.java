package BaseFrege.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_PListBracket_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_PListBracket_InferenceRule() {
  }
  public void applyRule(final SNode pListBracket, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // Prepare the actual items of the current list 
    final List<SNode> items = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(pListBracket, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38952abL, 0x3f5c5828a38952acL, "items")))) {
      if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d74L, "BaseFrege.structure.PLEBPatternArgument"))) {
        ListSequence.fromList(items).addElement(SLinkOperations.getTarget(SNodeOperations.cast(item, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d74L, "BaseFrege.structure.PLEBPatternArgument")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x73138b1e057e2d74L, 0x73138b1e057e2d77L, "arg")));
      }
    }


    // Infer the type of the current list, if the list is not empty 
    if (ListSequence.fromList(items).isNotEmpty()) {
      final SNode elementType_typevar_2675082928408461746 = typeCheckingContext.createNewRuntimeTypesVariable();
      for (int i = 0; i < ListSequence.fromList(items).count(); i++) {
        {
          SNode _nodeToCheck_1029348928467 = ListSequence.fromList(items).getElement(i);
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408461749", 0, null);
          typeCheckingContext.createGreaterThanInequality((SNode) typeCheckingContext.getRepresentative(elementType_typevar_2675082928408461746), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408461751", true), false, true, _info_12389875345);
        }
      }

      // The type of the list is defined by any of its items' types 
      {
        SNode _nodeToCheck_1029348928467 = pListBracket;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408461769", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928408461771", true), (SNode) _quotation_createNode_fi217j_a0e0g0b(typeCheckingContext.getRepresentative(elementType_typevar_2675082928408461746)), _info_12389875345);
      }
    }


    // Wait for the evaluation of the _typeFilledByParent to assign the type for the children items 
    {
      final SNode typeFromParent = typeCheckingContext.typeOf(SLinkOperations.getTarget(pListBracket, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent")), "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421178966549", true);
      typeCheckingContext.whenConcrete(typeFromParent, new Runnable() {
        public void run() {
          SNode typeToAssignChildren;
          if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L, "BaseFrege.structure.UnknownTypeNode"))) {
            // Case 1: No type is provided from the parent 
            typeToAssignChildren = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x4f4212f5c8d48453L, "BaseFrege.structure.UnknownTypeNode")), null);

            // Special case: Is the current list empty? 
            if (ListSequence.fromList(items).isEmpty()) {
              {
                SNode _nodeToCheck_1029348928467 = pListBracket;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928420371008", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928420370471", true), (SNode) _quotation_createNode_fi217j_a0a0e0b0k0b(), _info_12389875345);
              }
            }

          } else if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, "BaseFrege.structure.ListTypeNode"))) {
            // Case 2: Type from the parent is correctly set to be list 
            SNode ltn = SNodeOperations.cast(typeCheckingContext.getExpandedNode(typeFromParent), MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, "BaseFrege.structure.ListTypeNode"));
            SNode supposedItemType = SLinkOperations.getTarget(ltn, MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, 0x534698153429d2f1L, "itemsType"));
            typeToAssignChildren = supposedItemType;

            // Special case: Is the current list empty? 
            if (ListSequence.fromList(items).isEmpty()) {
              {
                SNode _nodeToCheck_1029348928467 = pListBracket;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928420371157", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "2675082928420371163", true), (SNode) typeCheckingContext.getExpandedNode(typeFromParent), _info_12389875345);
              }
            }

          } else {
            // Case 3: Type from the parent is incorrect 
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(pListBracket, "Found list type argument but declared is " + typeCheckingContext.getExpandedNode(typeFromParent) + ".", "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421179030906", null, errorTarget);
            }
            return;
          }

          // Assign the deduced type to the children items 
          for (SNode item : ListSequence.fromList(items)) {
            {
              SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SNodeOperations.cast(item, MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895193L, "BaseFrege.structure.PatternArgument")), MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a3895192L, 0x7fc1a9722da278d3L, "_typeFilledByParent"));
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "1231066225851671828", 0, null);
              typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "1231066225851671830", true), (SNode) typeToAssignChildren, _info_12389875345);
            }
          }
        }
      }, "r:505d399a-118b-43d5-a757-1b10b70dd06b(BaseFrege.typesystem)", "9205825421178966444", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x3f5c5828a38952abL, "BaseFrege.structure.PListBracket");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_fi217j_a0e0g0b(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x534698153429d2f0L, "ListTypeNode"), null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, 0x534698153429d2f1L, "itemsType"), HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_fi217j_a0a0e0b0k0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x534698153429d2f0L, "ListTypeNode"), null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, "BaseFrege"), 0x4f4212f5c8d48453L, "UnknownTypeNode"), null, null, false);
    quotedNode_1.addChild(MetaAdapterFactory.getContainmentLink(0x90eaf9a4a968473cL, 0x8aedfef10c04a5dfL, 0x534698153429d2f0L, 0x534698153429d2f1L, "itemsType"), quotedNode_2);
    return quotedNode_1;
  }
}
